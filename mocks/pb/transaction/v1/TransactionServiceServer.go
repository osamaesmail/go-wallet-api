// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	v1 "go-api-grpc/pb/transaction/v1"

	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceServer is an autogenerated mock type for the TransactionServiceServer type
type TransactionServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TransactionServiceServer) Create(_a0 context.Context, _a1 *v1.CreateRequest) (*v1.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Response
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateRequest) *v1.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *TransactionServiceServer) List(_a0 context.Context, _a1 *v1.ListRequest) (*v1.ListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListRequest) *v1.ListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedTransactionServiceServer provides a mock function with given fields:
func (_m *TransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewTransactionServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionServiceServer creates a new instance of TransactionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionServiceServer(t mockConstructorTestingTNewTransactionServiceServer) *TransactionServiceServer {
	mock := &TransactionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
