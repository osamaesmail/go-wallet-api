// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	transaction "go-api-grpc/pkg/transaction"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: model
func (_m *IRepository) Create(model transaction.Transaction) (transaction.Transaction, error) {
	ret := _m.Called(model)

	var r0 transaction.Transaction
	if rf, ok := ret.Get(0).(func(transaction.Transaction) transaction.Transaction); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaction.Transaction) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: req
func (_m *IRepository) List(req transaction.ListRequest) ([]transaction.DTO, int64, error) {
	ret := _m.Called(req)

	var r0 []transaction.DTO
	if rf, ok := ret.Get(0).(func(transaction.ListRequest) []transaction.DTO); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.DTO)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(transaction.ListRequest) int64); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(transaction.ListRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepository(t mockConstructorTestingTNewIRepository) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
